#!/usr/bin/ruby

# rs-describe-server

require 'rubygems'
require 'getoptlong'
require 'json'
require 'rest_connection'
require 'active_support'  #for to_xml()
require 'xmlsimple'

def usage
  puts("usage:  rs-describe-server --settings [current] [--nickname <server_nickname> | --id <server_id>]")
  puts("           [[--verbose]]")
end

def usage_exit
  usage; exit
end

def help
  usage
  puts ''
  puts 'Reboots a RightScale server.'
  puts ''
  puts "examples:  rs-reboot-server --name 'Sandbox'"
  puts ''
  exit
end

opts = GetoptLong.new(
  [ '--nickname', '-n', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--settings', '-s', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--id', '-i', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--xml', '-x', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--json', '-j', GetoptLong::OPTIONAL_ARGUMENT ]
)

server_name = false
server_id = false
settings = false
json = false
xml = false
verbose = false

opts.each do |opt, arg|
  case opt
    when '--nickname'
      server_name = arg
    when '--settings'
      settings = arg
      usage_exit if !(settings = 'current' || settings = 'next')
    when '--id'
      server_id = arg  
    when '--json'
      json = true
    when '--xml'
      xml = true
    when '--verbose'
      verbose = true
  	end
end

usage_exit if !(server_name || server_id)

# get server
if server_name
  puts "Finding server: '%#{server_name}%'"
  server = Server.find(:first) { |s| s.nickname =~ /#{server_name}/ }
  #puts "Found server, '#{server.nickname}'."
elsif server_id
  server = Server.find(server_id.to_i)
else
  usage_exit
end

if settings
    if settings == 'next'
      server_settings = server.settings
    elsif settings == 'current'
      server.reload_current
      server_settings = server.settings
    end
    output = server_settings
else
  output = server
end

if json
  puts output.to_json
elsif xml
  puts JSON.parse(output.to_json).to_xml(:root => 'servers', :skip_instruct => true)
else
  puts output.to_yaml
end


