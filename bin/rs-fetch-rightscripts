#!/usr/bin/ruby

# rs-fetch-rightscripts

require 'rubygems'
require 'getoptlong'
require 'json'
require 'rest_connection'
require 'activesupport'  #for to_xml()
require 'xmlsimple'

def usage
	puts("rs-fetch-rightscripts [ --id <server_template_id> | --name <server_template_name>] [ OPTIONS ]")
	puts("e.g. rs-fetch-rightscripts --name 'RightScale Linux Server RL 5.7 -v --xml'")
	exit
end

opts = GetoptLong.new(
  [ '--id', '-i', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--name', '-n', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--verbose', '-v', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--json', '-j', GetoptLong::OPTIONAL_ARGUMENT ],
  [ '--xml', '-x', GetoptLong::OPTIONAL_ARGUMENT ],
)

name = false
id = false
show_help = false
verbose = false
xml = false
json = false

opts.each do |opt, arg|
  case opt
  when '--name'
    name = arg
  when '--id'
	  id = arg
  when '--verbose'
    verbose = true
  when '--json'
    json = true
  when '--xml'
    xml = true
  end
end

usage if !(name || id)

def sanitize_filename(filename)
  filename.strip do |name|
   # NOTE: File.basename doesn't work right with Windows paths on Unix
   # get only the filename, not the whole path
   name.gsub! /^.*(\\|\/)/, ''

   # Finally, replace all non alphanumeric, underscore 
   # or periods with underscore
   # name.gsub! /[^\w\.\-]/, '_'
   # Basically strip out the non-ascii alphabets too 
   # and replace with x. 
   # You don't want all _ :)
   name.gsub!(/[^0-9A-Za-z.\-]/, 'x')
  end
end

# Awesome truncate
# First regex truncates to the length, plus the rest of that word, if any.
# Second regex removes any trailing whitespace or punctuation (except ;).
# Unlike the regular truncate method, this avoids the problem with cutting
# in the middle of an entity ex.: truncate("this &amp; that",9)  => "this &am..."
# though it will not be the exact length.
def awesome_truncate(text, length = 30, truncate_string = "...")
  return if text.nil?
  l = length - truncate_string.mb_chars.length
  text.mb_chars.length > length ? text[/\A.{#{l}}\w*\;?/m][/.*[\w\;]/m] + truncate_string : text
end

server_template = false

# get servertemplate
if name
  puts "Finding ServerTemplate: '%#{name}%'." unless ! verbose
  server_template = ServerTemplate.find(:first) { |s| s.nickname =~ /#{name}/ }
elsif id
  puts "Fetching ServerTemplate; ID: #{id}." unless ! verbose
  server_template = ServerTemplate.find(id.to_i)
end

if server_template
  puts "Located ServerTemplate, '#{server_template.nickname}'." unless ! verbose
  puts server_template.to_yaml unless ! verbose
else
  puts "No ServerTemplate found."
  exit 1
end

# get executables (RightScripts) of template
executables = server_template.fetch_executables

if json
  puts executables.to_json
elsif xml
  #puts JSON.parse(executables.to_json).to_xml(:root => 'right_scripts', :skip_instruct => true)
  executables.each do |exec|
    puts "<right_script>"
    puts " <position>#{exec.position}</position>"
    puts " <name>#{exec.name}</name>"
    puts " <recipe>#{! exec.recipe.to_s.empty? ? exec.recipe : 'n/a'}</recipe>"
    puts " <href>#{exec.href}</href>"
    puts " <description>#{exec.right_script.description}</description>"
    puts " <created_at>#{exec.right_script.created_at}</created_at>"
    puts " <updated_at>#{exec.right_script.updated_at}</updated_at>"
    puts " <version>#{exec.right_script.version == 0 ? 'HEAD' : exec.right_script.version}</version>"
    puts " <phase>#{exec.apply}</phase>"
    puts " <filename>#{sanitize_filename(exec.name).gsub(' ', '_')}</filename>"
    puts " <script>#{awesome_truncate(exec.right_script.script)}</script>"
    puts "</right_script>"
  end
#  puts "--- #{exec.position}  #{! exec.recipe.to_s.empty? ? exec.recipe : '*'} #{exec.name} #{exec.right_script.version == 0 ? 'HEAD' : 'rev'+exec.right_script.version.to_s} #{exec.description} #{exec.href} #{exec.right_script.created_at} #{exec.right_script.updated_at} #{exec.apply}"
#  puts "- #{sanitize_filename(exec.name)}: "
#  puts "#{awesome_truncate(exec.right_script.script)}"
#  puts '---'
#  puts
else
  puts executables.to_yaml
end